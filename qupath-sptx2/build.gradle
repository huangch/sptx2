plugins {
    id 'qupath.java-conventions'
    id 'version-catalog'
}

// We don't want to generate javadocs for the root project
javadoc.enabled = false

// See https://discuss.gradle.org/t/best-approach-gradle-multi-module-project-generate-just-one-global-javadoc/18657
task mergedJavadocs(type: Javadoc, 
		description: 'Generate merged javadocs for all projects',
		group: 'Documentation',
		dependsOn: subprojects.tasks.collect {it.withType(Javadoc)} ) {

	destinationDir = file("$buildDir/docs-merged/javadoc")
	title = "QuPath $gradle.ext.qupathVersion"

	// See https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html
	options.author(true)
	options.addStringOption('Xdoclint:none', '-quiet')
	
	options.encoding = 'UTF-8'

	options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
	options.links 'https://openjfx.io/javadoc/19/'
	options.links 'https://javadoc.io/doc/org.bytedeco/javacpp/1.5.8/'
	options.links 'https://javadoc.io/doc/org.bytedeco/opencv/4.6.0-1.5.8/'
	options.links 'https://javadoc.io/doc/com.google.code.gson/gson/2.10/'
	options.links 'https://javadoc.io/doc/org.locationtech.jts/jts-core/1.19.0/'
	options.links 'https://javadoc.io/doc/net.imagej/ij/1.53v/'
	options.links 'https://javadoc.scijava.org/Bio-Formats/'
	options.links 'https://javadoc.io/doc/ai.djl/api/0.19.0/'
	
	// Don't fail on error, because this happened too often due to a javadoc link being temporarily down
	failOnError = false

}

/*
 * Get version cataglog
 */
catalog {
    versionCatalog {
        from(files("./gradle/libs.versions.toml"))
    }
}

/*
 * Publish catalog to help with dependency management across extensions
 */
publishing {
    repositories {
        maven {
            name = "SciJava"
            def releasesRepoUrl = uri("https://maven.scijava.org/content/repositories/releases")
            def snapshotsRepoUrl = uri("https://maven.scijava.org/content/repositories/snapshots")
            // Use gradle -Prelease publish
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = 'io.github.qupath'
            artifactId = 'qupath-catalog'
            version = gradle.ext.qupathVersion
            from components.versionCatalog
        }
    }

}