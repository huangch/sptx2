/**
 * Conventions for using Deep Java Library with QuPath.
 */

plugins {
    id 'qupath.djl-conventions'
}

def djlEnginesProp = project.findProperty('djl.engines') ?: "default"
djlEnginesProp = djlEnginesProp.strip().toLowerCase()
def djlEngines = []
if (djlEnginesProp == "default")
	djlEngines = ['pytorch', 'tensorflow']
else if (djlEnginesProp == "none")
	djlEngines = []
else
	djlEngines = djlEnginesProp.split(",").collect(e -> e.toLowerCase().strip()).findAll(e -> !e.isBlank())

// Check for Apple Silicon - TensorFlow currently doesn't work there
if ('tensorflow' in djlEngines && properties['platform.shortName'] == 'mac' && System.properties['os.arch'] == 'aarch64') {
	println 'TensorFlow is not supported on Apple Silicon - engine will not be added'
	djlEngines.remove('tensorflow')
}
	
def djlApi = !djlEngines.isEmpty() || project.findProperty('djl.api')

def djlZoosProp = project.findProperty('djl.zoos') ?: "all"
djlZoosProp = djlZoosProp.strip().toLowerCase()
def djlZoos = []
if (djlZoosProp == "all")
	djlZoos = djlEngines
else if (djlZoosProp == "none")
	djlZoos = []
else
	djlZoos = djlZoosProp.split(",").collect(e -> e.toLowerCase().strip()).findAll(e -> !e.isBlank())


def djlVersion = libs.versions.deepJavaLibrary.get()

dependencies {
	if (djlApi)
		implementation "ai.djl:api:$djlVersion"
		
    if ('pytorch' in djlEngines) {
	    implementation "ai.djl.pytorch:pytorch-engine:$djlVersion"
	    if ('pytorch' in djlZoos)
		    implementation "ai.djl.pytorch:pytorch-model-zoo:$djlVersion"
	}
	
	if ('mxnet' in djlEngines) {
	    implementation "ai.djl.mxnet:mxnet-engine:$djlVersion"
	    if ('mxnet' in djlZoos)
		    implementation "ai.djl.mxnet:mxnet-model-zoo:$djlVersion"
	}

	if ('tensorflow' in djlEngines) {
	    implementation "ai.djl.tensorflow:tensorflow-engine:$djlVersion"
	    if ('tensorflow' in djlZoos)
		    implementation "ai.djl.tensorflow:tensorflow-model-zoo:$djlVersion"
	}
    
	if ('onnx' in djlEngines || 'onnxruntime' in djlEngines) {
	    implementation "ai.djl.onnxruntime:onnxruntime-engine:$djlVersion"
	    // No model zoo available
	}

	if ('paddlepaddle' in djlEngines) {
	    implementation "ai.djl.paddlepaddle:paddlepaddle-engine:$djlVersion"
	    if ('paddlepaddle' in djlZoos)
		    implementation "ai.djl.paddlepaddle:paddlepaddle-model-zoo:$djlVersion"
	}
	
	if ('onnx' in djlEngines || 'onnxruntime' in djlEngines) {
	    implementation "ai.djl.onnxruntime:onnxruntime-engine:$djlVersion"
	    // No model zoo available
	}
	
	if ('xgboost' in djlEngines) {
	    implementation "ai.djl.ml.xgboost:xgboost:$djlVersion"
	    // No model zoo available
	}
	
	if ('lightgbm' in djlEngines) {
	    implementation "ai.djl.ml.lightgbm:lightgbm:$djlVersion"
	    // No model zoo available
	}
	
	if ('tensorrt' in djlEngines) {
	    implementation "ai.djl.tensorrt:tensorrt:$djlVersion"
	    // No model zoo available
	}

    if ('tflite' in djlEngines || 'tensorflowlite' in djlEngines) {
	    implementation "ai.djl.tflite:tflite-engine:$djlVersion"
	    // No model zoo available
	}
	
	if ('dlr' in djlEngines || 'neodlr' in djlEngines) {
	    implementation "ai.djl.dlr:dlr-engine:$djlVersion"
	    // No model zoo available
	}
}